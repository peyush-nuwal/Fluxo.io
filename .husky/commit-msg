#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Commit message hook - validates commit message format
# This ensures consistent commit message formatting across the project

# Uncomment the following lines to enable commit message validation:
# npx --no -- commitlint --edit $1

# Alternative: Simple commit message validation
# This checks for conventional commit format: type(scope): description
# Examples: feat: add new feature, fix: resolve bug, docs: update readme

commit_regex='^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .{1,50}'

if ! grep -qE "$commit_regex" "$1"; then
    echo "❌ Invalid commit message format!"
    echo ""
    echo "Commit message should follow the format:"
    echo "  type(scope): description"
    echo ""
    echo "Types: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert"
    echo "Example: feat(auth): add user login functionality"
    echo ""
    exit 1
fi

echo "✅ Commit message format is valid!"
