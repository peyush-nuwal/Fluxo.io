name: CI/CD Pipeline

# This workflow runs on every push and pull request
# It ensures code quality, runs tests, and can deploy your application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Environment variables that can be used across all jobs
env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  # Job 1: Code Quality and Linting
  lint-and-format:
    name: üîç Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Check code formatting
      run: npm run format -- --check
      
    # Add more code quality checks here:
    # - name: Run type checking
    #   run: npm run type-check
    # 
    # - name: Security audit
    #   run: npm audit --audit-level moderate
    # 
    # - name: Check for console.log statements
    #   run: npx no-console-logs

  # Job 2: Run Tests
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    
    # Run this job in parallel with lint-and-format
    needs: []
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test
      
    - name: Generate test coverage
      run: npm run test -- --coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false
        
    # Add more test types here:
    # - name: Run integration tests
    #   run: npm run test:integration
    # 
    # - name: Run end-to-end tests
    #   run: npm run test:e2e
    # 
    # - name: Run performance tests
    #   run: npm run test:performance

  # Job 3: Build Frontend and Backend
  build:
    name: üèóÔ∏è Build Full-Stack Application
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install root dependencies
      run: npm ci
      
    - name: Install frontend dependencies
      run: npm run install:frontend
      
    - name: Install backend dependencies
      run: npm run install:backend
      
    - name: Build frontend
      run: npm run build:frontend
      
    - name: Build backend
      run: npm run build:backend
      
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 7
        
    - name: Upload backend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-build
        path: backend/dist/
        retention-days: 7
        
    # Add more build steps here:
    # - name: Bundle analysis
    #   run: npm run bundle-analyzer
    # 
    # - name: Check bundle size
    #   run: npm run check-bundle-size

  # Job 4: Security Scan
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: []
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 5: Deploy to AWS (only on main branch)
  deploy-aws:
    name: üöÄ Deploy to AWS
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    # Add environment protection rules in GitHub repository settings
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download frontend build artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/
        
    - name: Download backend build artifacts
      uses: actions/download-artifact@v3
      with:
        name: backend-build
        path: backend/dist/
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
        
    - name: Deploy frontend to S3
      run: |
        aws s3 sync frontend/dist/ s3://${{ secrets.S3_BUCKET_FRONTEND }} --delete
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
        
    - name: Package backend for Lambda
      run: |
        cd backend/dist
        zip -r ../../backend-lambda.zip .
        
    - name: Deploy backend to Lambda
      run: |
        aws lambda update-function-code \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
          --zip-file fileb://backend-lambda.zip
          
    - name: Update Lambda environment variables
      run: |
        aws lambda update-function-configuration \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
          --environment Variables='{
            "NODE_ENV":"production",
            "API_URL":"https://${{ secrets.API_DOMAIN }}"
          }'
    
    - name: Deployment notification
      run: echo "AWS deployment completed successfully!"

  # Job 6: Deploy to Staging (only on develop branch)
  deploy-staging:
    name: üß™ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download frontend build artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/
        
    - name: Download backend build artifacts
      uses: actions/download-artifact@v3
      with:
        name: backend-build
        path: backend/dist/
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
        
    - name: Deploy frontend to S3 (Staging)
      run: |
        aws s3 sync frontend/dist/ s3://${{ secrets.S3_BUCKET_FRONTEND_STAGING }} --delete
        
    - name: Package backend for Lambda (Staging)
      run: |
        cd backend/dist
        zip -r ../../backend-lambda-staging.zip .
        
    - name: Deploy backend to Lambda (Staging)
      run: |
        aws lambda update-function-code \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME_STAGING }} \
          --zip-file fileb://backend-lambda-staging.zip
    
    - name: Staging deployment notification
      run: echo "Staging deployment completed successfully!"

  # Job 7: Cleanup (runs after all jobs)
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, build, security, deploy-aws, deploy-staging]
    if: always()
    
    steps:
    - name: Cleanup old artifacts
      run: echo "Cleaning up old artifacts and caches..."
      
    # Add cleanup steps here:
    # - name: Delete old Docker images
    #   run: docker system prune -f
    # 
    # - name: Clear npm cache
    #   run: npm cache clean --force
