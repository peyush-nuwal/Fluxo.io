name: Release

# This workflow handles automated releases and versioning
# It runs when a new tag is pushed or manually triggered

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Create Release
  create-release:
    name: ðŸ“¦ Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm run test
      
    - name: Build application
      run: npm run build
      
    - name: Generate changelog
      run: |
        # Generate changelog from git commits
        echo "# Changelog" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/
        asset_name: build-${{ github.ref_name }}.zip
        asset_content_type: application/zip

  # Job 2: Publish to NPM (if applicable)
  publish-npm:
    name: ðŸ“¤ Publish to NPM
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build package
      run: npm run build
      
    - name: Publish to NPM
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    # Add more publishing options here:
    # 
    # For Docker Hub:
    # - name: Build and push Docker image
    #   uses: docker/build-push-action@v4
    #   with:
    #     context: .
    #     push: true
    #     tags: |
    #       your-username/your-app:latest
    #       your-username/your-app:${{ github.ref_name }}
    # 
    # For GitHub Container Registry:
    # - name: Build and push to GHCR
    #   uses: docker/build-push-action@v4
    #   with:
    #     context: .
    #     push: true
    #     tags: ghcr.io/${{ github.repository }}:${{ github.ref_name }}

  # Job 3: Notify Team
  notify:
    name: ðŸ“¢ Notify Team
    runs-on: ubuntu-latest
    needs: [create-release, publish-npm]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#releases'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        
    # Add more notification options here:
    # 
    # For Discord:
    # - name: Notify Discord
    #   uses: Ilshidur/action-discord@master
    #   with:
    #     args: 'Release ${{ github.ref_name }} has been published!'
    #   env:
    #     DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
    # 
    # For Email:
    # - name: Send Email
    #   uses: dawidd6/action-send-mail@v3
    #   with:
    #     server_address: smtp.gmail.com
    #     server_port: 587
    #     username: ${{ secrets.EMAIL_USERNAME }}
    #     password: ${{ secrets.EMAIL_PASSWORD }}
    #     subject: 'New Release: ${{ github.ref_name }}'
    #     body: 'A new release has been published!'
    #     to: team@company.com
